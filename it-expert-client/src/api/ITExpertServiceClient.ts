/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateObjectsRequest | undefined): Promise<Int32IEnumerableOperationResultResponse> {
        let url_ = this.baseUrl + "/Objects/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<Int32IEnumerableOperationResultResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Int32IEnumerableOperationResultResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Int32IEnumerableOperationResultResponse>(<any>null);
    }

    /**
     * @param serialNumber (optional) 
     * @param code (optional) 
     * @param value (optional) 
     * @param skipCount (optional) 
     * @param takeCount (optional) 
     * @return Success
     */
    find(serialNumber: number | null | undefined, code: number | null | undefined, value: string | null | undefined, skipCount: number | undefined, takeCount: number | undefined): Promise<FindObjectResponseOperationResultResponse> {
        let url_ = this.baseUrl + "/Objects/find?";
        if (serialNumber !== undefined && serialNumber !== null)
            url_ += "serialNumber=" + encodeURIComponent("" + serialNumber) + "&";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (value !== undefined && value !== null)
            url_ += "value=" + encodeURIComponent("" + value) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (takeCount === null)
            throw new Error("The parameter 'takeCount' cannot be null.");
        else if (takeCount !== undefined)
            url_ += "takeCount=" + encodeURIComponent("" + takeCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFind(_response);
        });
    }

    protected processFind(response: Response): Promise<FindObjectResponseOperationResultResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindObjectResponseOperationResultResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FindObjectResponseOperationResultResponse>(<any>null);
    }
}

export class ObjectRequest implements IObjectRequest {
    code?: number;
    value?: string | undefined;

    constructor(data?: IObjectRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ObjectRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["value"] = this.value;
        return data; 
    }
}

export interface IObjectRequest {
    code?: number;
    value?: string | undefined;
}

export class CreateObjectsRequest implements ICreateObjectsRequest {
    objects?: ObjectRequest[] | undefined;

    constructor(data?: ICreateObjectsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["objects"])) {
                this.objects = [] as any;
                for (let item of _data["objects"])
                    this.objects!.push(ObjectRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateObjectsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateObjectsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.objects)) {
            data["objects"] = [];
            for (let item of this.objects)
                data["objects"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateObjectsRequest {
    objects?: ObjectRequest[] | undefined;
}

export class Int32IEnumerableOperationResultResponse implements IInt32IEnumerableOperationResultResponse {
    result?: number[] | undefined;
    error?: string[] | undefined;

    constructor(data?: IInt32IEnumerableOperationResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(item);
            }
            if (Array.isArray(_data["error"])) {
                this.error = [] as any;
                for (let item of _data["error"])
                    this.error!.push(item);
            }
        }
    }

    static fromJS(data: any): Int32IEnumerableOperationResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Int32IEnumerableOperationResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item);
        }
        if (Array.isArray(this.error)) {
            data["error"] = [];
            for (let item of this.error)
                data["error"].push(item);
        }
        return data; 
    }
}

export interface IInt32IEnumerableOperationResultResponse {
    result?: number[] | undefined;
    error?: string[] | undefined;
}

export class ObjectInfo implements IObjectInfo {
    serialNumber?: number;
    code?: number;
    value?: string | undefined;

    constructor(data?: IObjectInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serialNumber = _data["serialNumber"];
            this.code = _data["code"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ObjectInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serialNumber"] = this.serialNumber;
        data["code"] = this.code;
        data["value"] = this.value;
        return data; 
    }
}

export interface IObjectInfo {
    serialNumber?: number;
    code?: number;
    value?: string | undefined;
}

export class FindObjectResponse implements IFindObjectResponse {
    totalCount?: number;
    objects?: ObjectInfo[] | undefined;

    constructor(data?: IFindObjectResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["objects"])) {
                this.objects = [] as any;
                for (let item of _data["objects"])
                    this.objects!.push(ObjectInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FindObjectResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FindObjectResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.objects)) {
            data["objects"] = [];
            for (let item of this.objects)
                data["objects"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFindObjectResponse {
    totalCount?: number;
    objects?: ObjectInfo[] | undefined;
}

export class FindObjectResponseOperationResultResponse implements IFindObjectResponseOperationResultResponse {
    result?: FindObjectResponse;
    error?: string[] | undefined;

    constructor(data?: IFindObjectResponseOperationResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? FindObjectResponse.fromJS(_data["result"]) : <any>undefined;
            if (Array.isArray(_data["error"])) {
                this.error = [] as any;
                for (let item of _data["error"])
                    this.error!.push(item);
            }
        }
    }

    static fromJS(data: any): FindObjectResponseOperationResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FindObjectResponseOperationResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.error)) {
            data["error"] = [];
            for (let item of this.error)
                data["error"].push(item);
        }
        return data; 
    }
}

export interface IFindObjectResponseOperationResultResponse {
    result?: FindObjectResponse;
    error?: string[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}